<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_lfp_sp.PortalProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Script that is used while processing or translating an artifact</description>
        <name>PortalProcessor</name>
        <script><![CDATA[/* global global, gs */
/* global Class, GlideRecord, Set, GlideTableHierarchy */
/* eslint no-undef: "error" */
var PortalProcessor = Class.create();
PortalProcessor.prototype = Object.extendsObject(global.LFArtifactProcessorSNC, {
    category: 'localization_framework', // DO NOT REMOVE THIS LINE!

    /**********
     * Extracts the translatable content for the artifact record
     * 
     * @param params.tableName The table name of the artifact record
     * @param params.sysId The sys_id of the artifact record 
     * @param params.language Language into which the artifact has to be translated (Target language)
     * @return LFDocumentContent object
     **********/
    getTranslatableContent: function(params) {
		/**********
         * Use LFDocumentContentBuilder to build the LFDocumentContent object
         * Use the build() to return the LFDocumentContent object
         **********/
		const builder = new global.LFDocumentContentBuilder('v1', params.language, params.sysId, params.tableName, params);
		
		const widgetTables = new GlideTableHierarchy('sp_widget').getAllExtensions();
		const instanceTables = new GlideTableHierarchy('sp_instance').getAllExtensions();
		
		if (widgetTables.indexOf(params.tableName) != -1) {
			this.processWidget(params.sysId, builder);
		} else if (instanceTables.indexOf(params.tableName) != -1) {
			this.processWidgetInstance(params.sysId, builder);
		} else if (params.tableName == 'sp_page') {
			const widgetSysIDs = this.getWidgets(params.sysId);
			for (let i = 0; i < widgetSysIDs.length; i++) {
				this.processWidget(widgetSysIDs[i], builder);
			}
		} else if (params.tableName == 'sp_portal') {
			// TODO: Implement...
			// 1.) Static Pages
			// 2.) Page Routes
			// 3.) Header Menu
			// 4.) Dynamic Redirects (e.g. A-Tags (links) in Widget HTML, $location.search, ...)
		}
		
		return builder.build();
    },
	
	getWidgets: function (pageSysID) {
		const containerGr = new GlideRecord('sp_container');
		containerGr.addQuery('sp_page', pageSysID);
		containerGr.query();
		
		let widgetSysIDs = [];
		while (containerGr.next()) {
			const rows = getRows(containerGr.getUniqueValue());
			rows.forEach(rowSysID => {
				getColumns(rowSysID).forEach(columnSysID => {
					widgetSysIDs = widgetSysIDs.concat(getWidgets());
				});
			});
		}
		
		// remove duplicate SysIDs
		return [...new Set(widgetSysIDs)];
		
		function getRows(containerSysID) {
			const rowGr = new GlideRecord('sp_row');
			rowGr.addQuery('sp_container', containerSysID);
			rowGr.query();
			
			const rowSysIDs = [];
			while (rowGr.next()) {
				rowSysIDs.push(rowGr.getUniqueValue());
			}
			
			return rowSysIDs;
		}
		
		function getColumns(rowSysID) {
			const columnGr = new GlideRecord('sp_column');
			columnGr.addQuery('sp_row', rowSysID);
			columnGr.query();
			
			let columnSysIDs = [];
			while (columnGr.next()) {
				const columnSysID = columnGr.getUniqueValue();
				columnSysIDs.push(columnSysID);
				
				// columns can have child rows!
				const rowGr = new GlideRecord('sp_row');
				rowGr.addQuery('sp_column', columnSysID);
				rowGr.query();
				while (rowGr.next()) {
					columnSysIDs = columnSysIDs.concat(getColumns(rowGr.getUniqueValue()));
				}
			}
			
			return columnSysIDs;
		}
		
		function getWidgets(columnSysID) {
			const instanceGr = new GlideRecord('sp_instance');
			instanceGr.addQuery('sp_column', columnSysID);
			instanceGr.addNotNullQuery('sp_widget');
			instanceGr.query();
			
			const widgetSysIDs = [];
			while (instanceGr.next()) {
				widgetSysIDs.push(instanceGr.getValue('sp_widget'));
			}
			
			return widgetSysIDs;
		}
	},
	
	processWidgetInstance: function(instanceSysID, builder) {
		const instanceGr = new GlideRecord('sp_instance');
		instanceGr.query('sys_id', instanceSysID);
		instanceGr.setLimit(1);
		instanceGr.query();
		if (instanceGr.next()) {
			const messages = this._processHTML(instanceGr.widget_parameters.toString());
			if (messages == null) {
				gs.error('LF+ SP: Too many iterations while processing HTML for instance ' + instanceGr.getDisplayValue() + ' (' + instanceGr.sys_id + ')');
			} else {
				const htmlLabel = instanceGr.widget_parameters.getLabel();
				const widgetName = instanceGr.getDisplayValue();
				builder.processStringArray(messages, htmlLabel + ': ' + widgetName, htmlLabel);
			}
			
			builder.processTranslatableFieldsForSingleRecord(instanceGr, 'Widget Instance');
		}
	},
	
	processWidget: function(widgetSysID, builder) {
		const widgetGr = new GlideRecord('sp_widget');
		widgetGr.query('sys_id', widgetSysID);
		widgetGr.setLimit(1);
		widgetGr.query();
		if (widgetGr.next()) {
			const messages = this._processHTML(widgetGr.template.toString());
			if (messages == null) {
				gs.error('LF+ SP: Too many iterations while processing HTML for widget ' + widgetGr.getDisplayValue() + ' (' + widgetGr.sys_id + ')');
			} else {
				const htmlLabel = widgetGr.template.getLabel();
				const widgetName = widgetGr.getDisplayValue();
				builder.processStringArray(messages, htmlLabel + ': ' + widgetName, htmlLabel);
			}
			
			const widgetName = widgetGr.getDisplayValue();
			// Server script and Client controller simply have to translate gs.getMessage / i18n.getMessage
			['script', 'client_script'].forEach(field => {
				const element = widgetGr.getElement(field);
				const label = element.getLabel();
				builder.processScript(element.toString(), label + ': ' + widgetName, label);
			});
		}
	},
	
	_processHTML: function (html, builder) {
		// in-place translations via ${ MESSAGE {{DATA-BINDING}} } in 'Body HTML template'
		let i = html.indexOf('${'); let count = 0;
		let pcount = 0;
		let start = 0;
		const messages = [];
		while (i < html.length && i != -1) {
			if (count++ > html.length) {
				return null;
			}

			if (html[i] == '$' && html[i + 1] == '{' && (++pcount == 1)) {
				// beginning of message
				// Note: This won't throw if (i + 1) is out of bounds
				i += 2;
				start = i;
			} else if (html[i] == '{' && pcount > 0) {
				// regular open brace (only registered when we've started parsing)
				pcount++;
				i++;
			} else if (html[i] == '}' && pcount > 0 && (--pcount == 0)) {
				// if all braces closed, message is fully parsed
				messages.push(html.substring(start, i));
				i = html.indexOf('${', i);
			} else {
				i++;
			}
		}

		return [...new Set(messages)];
	},

    /**********
     * Uncomment the saveTranslatedContent function to override the default behavior of saving translations
     * 
     * @param documentContent LFDocumentContent object
     * @return
     **********/
    /**********
        saveTranslatedContent: function(documentContent) {},
    **********/

    type: 'PortalProcessor'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-01-27 00:39:19</sys_created_on>
        <sys_id>6cce916897044e503c2d3f56f053af3f</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>PortalProcessor</sys_name>
        <sys_package display_value="Localization Framework+ Service Portal" source="x_376096_lfp_sp">2eaed92897044e503c2d3f56f053affe</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Service Portal">2eaed92897044e503c2d3f56f053affe</sys_scope>
        <sys_update_name>sys_script_include_6cce916897044e503c2d3f56f053af3f</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-04-29 02:19:52</sys_updated_on>
    </sys_script_include>
</record_update>
